Login in to virtual machine
## Install AZ CLI on the machine
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
## Authenticate to azure using az login command
az login

## In case multiple subscriptions, Check which subscription is set to default:
az account list --output table
## Set the right subscription to default (optional)
az account set --subscription Demos 

## Create storage account which will be used to store terraform state:

export RG=myResourceGroup 
export STACTNAME=terraformstacc`date +%d%m%Y`
export LOCATION=eastus
az group create --name $RG --location eastus
az storage account create --name $STACTNAME --resource-group $RG --location $LOCATION --sku Standard_LRS --kind StorageV2
  
## Verify the resource group and storage account created  from the portal
## Get the access key of the storage account and assign it to a variable
export ACT_KEY=''

## Create the container
az storage container create -n tfstate --account-name $STACTNAME --account-key $ACT_KEY

## Verify the container from portal

## Search terraform install on google and open very first link
## Execute all commands to install terraform

## Download provider.tf, variables.tf, terraform.tfvars, main.tf files to current working directory

mkdir aks ## we will download terraform configuration files into this directory

curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/provider.tf -o /root/aks/provider.tf
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/variables.tf -o /root/aks/variables.tf
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/terraform.tfvars -o /root/aks/terraform.tfvars
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/main.tf -o /root/aks/main.tf 
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/output.tf -o /root/aks/output.tf 

----------------------------
## Let's open each file and understand the code.
----------------------------

----------------------------
## Create service principal to authenticate to resource provider. We can use managed identity also. In this demo we will use service principal.

az ad sp create-for-rbac --name myAKSClusterServicePrincipal

Note down the application id and password and assign these to the variables declared in terraform.tfvars file
----------------------------
## Initialize the terraform

terraform init
----------------------------

----------------------------
## Run terraform plan

terraform plan
----------------------------

----------------------------
## Run terraform apply -approve to create the resources

terraform apply -auto-approve
----------------------------


## In order to connect to the kubernetes cluster, we would need to install kubectl and download the kube config file in home directory:

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client

mkdir .kube
echo "$(terraform output kube_config)" > ~/.kube/config

## If you see << EOT at the beginning and EOT at the end, edit the content of the file to remove these characters in file config.

vim .kube/config

## Let's now check the number of nodes part of the cluster using kubectl command:

kubectl get nodes




