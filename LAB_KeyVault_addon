Secrets Store CSI Driver on Azure Kubernetes Service (AKS) provides a variety of methods of identity-based access to your Azure key vault.  

1. Pod identities
2. User Assigned Identity
3. System Assigned Identity


Pod Identities:-

Kubernetes native way to represent cloud identity, configure pods to have identities associated with them, and facilitate applications inside them to access cloud resources and services like azure key vault.

Steps to be performed:
1. Create a Cluster with azure-keyvault-secret-provider addon and pod identity enabled. 

a. azure-keyvault-secret-provider will deploy  aks-secrets-store-provider, aks-secrets-store-csi-driver
b. pod identity enabled will deploy will deploy NMI - node managed identity 
2. Create Azure Identity and assign it VM contributer role scopped with aks VMSS resource group
3. Add pod identity to AKS, this will create NMI pod, azureidentity and azureidentity binding to enable access to pods to get token from AD to access keyvault service
4. Create Azure Key Vault and two secrets in it
5. Assign get permissions to secret for azure identity



Steps:

## Register the EnablePodIdentityPreview feature:
az feature register --name EnablePodIdentityPreview --namespace Microsoft.ContainerService
az provider register -n Microsoft.ContainerService
az feature show --name EnablePodIdentityPreview  --namespace Microsoft.ContainerService

## You also need the aks-preview Azure CLI extension version 0.5.5 or later. Install the aks-preview Azure CLI extension by using :
az extension add --name aks-preview


## Create resource group
az group create -n myResourceGroup -l eastus

##Create AKS cluster
az aks create -n myAKSCluster -g myResourceGroup --enable-addons azure-keyvault-secrets-provider --enable-pod-identity --network-plugin azure --node-count 1

## option azure-keyvault-secrets-provider deploys secret store csi driver and secret store provider
## option pod-identity will deploy NMI daemonset on the cluster
## It is recommended to use azure network-plugin with pod identity

##Create an identity
export IDENTITY_RESOURCE_GROUP="myResourceGroup"
export IDENTITY_NAME="application-identity"
az identity create --resource-group ${IDENTITY_RESOURCE_GROUP} --name ${IDENTITY_NAME}
export IDENTITY_CLIENT_ID="$(az identity show -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} --query clientId -otsv)"
export IDENTITY_RESOURCE_ID="$(az identity show -g ${IDENTITY_RESOURCE_GROUP} -n ${IDENTITY_NAME} --query id -otsv)"

##Assign Virtual Machine Contributor role permissions for the identity

NODE_GROUP=$(az aks show -g myResourceGroup -n myAKSCluster --query nodeResourceGroup -o tsv)
NODES_RESOURCE_ID=$(az group show -n $NODE_GROUP -o tsv --query "id")
az role assignment create --role "Virtual Machine Contributor" --assignee "$IDENTITY_CLIENT_ID" --scope $NODES_RESOURCE_ID

##Create pod identity for the cluster:
export POD_IDENTITY_NAME="my-pod-identity"
export POD_IDENTITY_NAMESPACE="my-app"
az aks pod-identity add --resource-group myResourceGroup --cluster-name myAKSCluster --namespace ${POD_IDENTITY_NAMESPACE}  --name ${POD_IDENTITY_NAME} --identity-resource-id ${IDENTITY_RESOURCE_ID}

## Azure will create an AzureIdentity resource in your cluster representing the identity in Azure, and an AzureIdentityBinding resource which connects the AzureIdentity to a selector. You can view these resources with
## Download the kubeconfig file to connect to the cluster
az aks get-credentials --resource-group MyResourceGroup --name MyAKSCluster --overwrite

kubectl get azureidentity -n $POD_IDENTITY_NAMESPACE
kubectl get azureidentitybinding -n $POD_IDENTITY_NAMESPACE

kubectl get azureidentity -n $POD_IDENTITY_NAMESPACE -o yaml
kubectl get azureidentitybinding -n $POD_IDENTITY_NAMESPACE -o yaml


##Take note of the newly created identity's clientId:

Assign permissions to the new identity to enable it to read your key vault and view its contents by running the following commands:

## Let's create azure key vault and create a secret and key within it

export KEYVAULT=mykeyvault`date +%d%m%Y`

az keyvault create -n $KEYVAULT -g myResourceGroup -l eastus
az keyvault secret set --vault-name $KEYVAULT -n ExampleSecret --value myPas5@wD1200
az keyvault secret set --vault-name $KEYVAULT -n ExampleSecret2 --value mySecondPassw0RD

## Head back to azure portal to verify vault and secret created and get the client id of identity:

export IDENTITY_CLIENT_ID="<clientID>"

## Grant your identity permissions that enable it to read your key vault and view its contents

az keyvault set-policy -n $KEYVAULT --secret-permissions get --spn $IDENTITY_CLIENT_ID




## Create manifest file secretproviderclass.yaml to create secretproivider to retrieve objects from key vault:

# This is a SecretProviderClass example using aad-pod-identity to access the key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-podid
spec:
  provider: azure
  parameters:
    usePodIdentity: "true"               # Set to true for using aad-pod-identity to access your key vault
    keyvaultName: <key-vault-name>       # Set to the name of your key vault
    cloudName: ""                        # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: ExampleSecret
          objectType: secret             # object types: secret, key, or cert
          objectVersion: ""              # [OPTIONAL] object versions, default to latest if empty
        - |
          objectName: mykey
          objectType: key
          objectVersion: ""
    tenantId: 1fb17474-0dfd-4e96-8bb8-a2b65fc0667b                # The tenant ID of the key vault
    
    
## Create secretproviderclass to your cluster:
kubectl apply -f secretproviderclass.yaml -n my-app

## Create pod by using the following pod.yaml, using the name of your identity:

# This is a sample pod definition for using SecretProviderClass and aad-pod-identity to access the key vault
kind: Pod
apiVersion: v1
metadata:
  name: busybox-secrets-store-inline-podid
  labels:
    aadpodidbinding: <name>                   # Set the label value to the name of your pod identity
spec:
  containers:
    - name: busybox
      image: k8s.gcr.io/e2e-test-images/busybox:1.29-1
      command:
        - "/bin/sleep"
        - "10000"
      volumeMounts:
      - name: secrets-store01-inline
        mountPath: "/mnt/secrets-store"
        readOnly: true
  volumes:
    - name: secrets-store01-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "azure-kvname-podid"
          

## Final step is to create the pod
kubectl apply -f pod.yaml -n my-app

## Now lets login in to the pod and check the volumes to see the secrets


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


User Assigned Identity--

## Create resource group
az group create -n myResourceGroup -l eastus

## Create AKS cluster
az aks create -n myAKSCluster -g myResourceGroup --enable-addons azure-keyvault-secrets-provider --node-count 1 --enable-managed-identity 

The addon creates user assigned identity named azurekeyvaultsecretsprovider-*. You can see it from azure portal- search for managed identities:

  "identityProfile": {
    "kubeletidentity": {
      "clientId": "0c6fce52-d4f1-4bb6-b714-ad38b383c938",
      "objectId": "11021227-c4a7-453d-bf19-cf512ad785be",
      "resourceId": "/subscriptions/f8b9b693-fc66-4e1b-a547-110404abc3c3/resourcegroups/MC_myResourceGroup_myAKSCluster_eastus/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster-agentpool"
    }

## Let's declare a variable and assign the user identity client id to it, we will use it later.

export IDENTITY_CLIENT_ID="<clientID>"


## Let's now download the credential and connect to kubernetes cluster

az aks get-credentials --resource-group MyResourceGroup --name MyAKSCluster --overwrite
kubectl get nodes
kubectl get pods

kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver, secrets-store-provider-azure)'

NAME                                     READY   STATUS    RESTARTS   AGE
aks-secrets-store-csi-driver-4vpkj       3/3     Running   2          4m25s
aks-secrets-store-csi-driver-ctjq6       3/3     Running   2          4m21s
aks-secrets-store-csi-driver-tlvlq       3/3     Running   2          4m24s
aks-secrets-store-provider-azure-5p4nb   1/1     Running   0          4m21s
aks-secrets-store-provider-azure-6pqmv   1/1     Running   0          4m24s
aks-secrets-store-provider-azure-f5qlm   1/1     Running   0          4m25s

## Please note, the addon installs the Secrets Store CSI Driver and the Azure Key Vault Provider which are running in the form of pods.


## Let's create azure key vault and create a secret within it

### Lets decalare a variable KEYVAULT for keyvault name with a unique value. 

export KEYVAULT=mykeyvault`date +%d%m%Y`

### Create keyvault

az keyvault create -n $KEYVAULT -g myResourceGroup -l eastus

### Create secret ExampleSecret with the some value.

az keyvault secret set --vault-name $KEYVAULT -n ExampleSecret --value MyAKSExampleSecret


## Head back to azure portal to verify vault and see secret is created 

## Now grant your identity permissions that enable it to read your key vault and view its contents

az keyvault set-policy -n $KEYVAULT --secret-permissions get --spn $IDENTITY_CLIENT_ID


## Create a SecretProviderClass. Please replace tanentID, managedID, clientID, name of your keyvault and secret name.

# This is a SecretProviderClass example using user-assigned identity to access your key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-user-msi
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: <client-id>   # Set the clientID of the user-assigned managed identity to use
    keyvaultName: <key-vault-name>        # Set to the name of your key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: ExampleSecret
          objectType: secret              # object types: secret, key, or cert
          objectVersion: ""               # [OPTIONAL] object versions, default to latest if empty
    tenantId: 1fb17474-0dfd-4e96-8bb8-a2b65fc0667b                 # The tenant ID of the key vault

create pod using below pod.yaml

kind: Pod
apiVersion: v1
metadata:
  name: busybox-secrets-store-inline
spec:
  containers:
    - name: busybox
      image: k8s.gcr.io/e2e-test-images/busybox:1.29-1
      command:
        - "/bin/sleep"
        - "10000"
      volumeMounts:
      - name: secrets-store01-inline
        mountPath: "/mnt/secrets-store"
        readOnly: true
  volumes:
    - name: secrets-store01-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "azure-kvname-user-msi"



## check the secret mounted in the volume
kubectl exec -it busybox-secrets-store-inline -- cat /mnt/secrets-store/ExampleSecret

-----------
3. System Assigned Identity


1. Create system managed identity from portal under vmss blade
2. Run command to see identity
az vmss identity show -g MC_myResourceGroup_myAKSCluster_eastus  -n aks-nodepool1-12398049-vmss  -o yaml
3. Assign get permission to keyvault secret for this principalID from portal

4. Create secretproviderclass with below file secretproviderclass.yaml

# This is a SecretProviderClass example using system-assigned identity to access your key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-system-msi
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"    # Set to true for using managed identity
    userAssignedIdentityID: ""      # If empty, then defaults to use the system assigned identity on the VM
    keyvaultName: mykeyvault2005202200
    cloudName: ""                   # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: ExampleSecret
          objectType: secret        # object types: secret, key, or cert
          objectVersion: ""         # [OPTIONAL] object versions, default to latest if empty
    tenantId: 1fb17474-0dfd-4e96-8bb8-a2b65fc0667b           # The tenant ID of the key vault


### Create pod with below defination

kind: Pod
apiVersion: v1
metadata:
  name: busybox-secrets-store-inline
spec:
  containers:
    - name: busybox
      image: k8s.gcr.io/e2e-test-images/busybox:1.29-1
      command:
        - "/bin/sleep"
        - "10000"
      volumeMounts:
      - name: secrets-store01-inline
        mountPath: "/mnt/secrets-store"
        readOnly: true
  volumes:
    - name: secrets-store01-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "azure-kvname-user-msi"
          

## Check the value of secret mounted in volume

kubectl exec -it busybox-secrets-store-inline -- cat /mnt/secrets-store/ExampleSecret

## Disable the addon:

## Before you disable the add-on, ensure that no SecretProviderClass is in use. Trying to disable the add-on while SecretProviderClass exists will result in an error.

kubectl delete -f secretproviderclass.yaml

az aks disable-addons --addons azure-keyvault-secrets-provider -g myResourceGroup -n myAKSCluster

Please note  :--

If the add-on is disabled, existing workloads will have no issues and will not see any updates in the mounted secrets. If the pod restarts or a new pod is created as part of scale-up event, the pod will fail to start because the driver is no longer running.
