OSM automatically discovers services that are a part of the service mesh.
OSM creates traffic policy rules on each Envoy proxy sidecar to be able to communicate with these services.


## Create resource group
az group create --name myResourceGroup --location eastus

## Create AKS cluster with open-service-mesh enabled

az aks create \
  --resource-group myResourceGroup \
  --name myAKSCluster \
  --enable-addons open-service-mesh \
  --node-count 2

## Get the credentials for your cluster
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --overwrite

##Verify that the OSM add-on is installed on your cluster

az aks show --resource-group myResourceGroup --name myAKSCluster  --query 'addonProfiles.openServiceMesh.enabled'

## Verify that the OSM mesh is running on your cluster

kubectl get deployment -n kube-system
kubectl get pods -n kube-system

## You will see bootstrap, controller and injector running

## Verify the configuration of your OSM mesh

kubectl get meshconfig osm-mesh-config -n kube-system -o yaml

Here enablePermissiveTrafficPolicyMode: true, which means OSM has permissive traffic policy mode enabled. With this mode enabled in your OSM mesh. 
Nothing is blocked with this default setting. 


## Install osm client

OSM_VERSION=v1.0.0
curl -sL "https://github.com/openservicemesh/osm/releases/download/$OSM_VERSION/osm-$OSM_VERSION-linux-amd64.tar.gz" | tar -vxzf -
echo "export PATH=$PATH:/home/nitin/linux-amd64/" >> ~/.profile
. .profile

## Check the version of open service mesh
osm version


## Let's now deploy sample microservice. We will deploy 5 different Pods as part of this microservice, and apply policies to control the traffic between them.
## Let's first create 5 name namespaces for each component of the service

kubectl create ns bookstore 
kubectl create ns bookbuyer 
kubectl create ns bookthief 
kubectl create ns bookwarehouse

## Verify the namespace
kubectl get ns bookstore -o yaml

## Enable OSM to the namespaces

osm namespace add bookstore bookbuyer bookthief bookwarehouse

## osm controller will keep on monitoring any pods being created in these namespace and will add envoy sidecar proxy to that. 
## The above command will add annotation which we can verify by running command:

kubectl get ns bookstore -o yaml

NOTE: Each namespace will have 2 annotations
openservicemesh.io/monitored-by: osm 
openservicemesh.io/sidecar-injection: enabled

## 

## Let's now onboard the application:
## First create a directory /tmp/bookapp and download all required yaml files there:
mkdir /tmp/bookapp
cd /tmp/bookapp
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/bookbuyer.yaml -o /tmp/bookapp/bookbuyer.yaml 
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/bookwarehouse.yaml -o /tmp/bookapp/bookwarehouse.yaml
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/mysql.yaml -o /tmp/bookapp/mysql.yaml
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/bookstore-v1.yaml -o /tmp/bookapp/bookstore-v1.yaml
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/bookstore-v2.yaml -o /tmp/bookapp/bookstore-v2.yaml
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/bookthief.yaml -o /tmp/bookapp/bookthief.yaml

kubectl apply -f bookbuyer.yaml
## What got installed?
kubectl get pods,deployments,serviceaccounts -n bookbuyer

kubectl apply -f bookstore-v1.yaml
## What got installed?
kubectl get pods,deployments,serviceaccounts,services,endpoints -n bookstore

kubectl apply -f bookwarehouse.yaml
kubectl apply -f mysql.yaml
## What got installed?
kubectl get pods,deployments,serviceaccounts,services,endpoints -n bookwarehouse

## Download the script and execute to portforward the pods to access from browser:

curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/port-forward-all.sh -o /tmp/bookapp/port-forward-all.sh
chmod +x /tmp/bookapp/port-forward-all.sh

## Expose bookbuyer service and access it.

## Run commands to port forward bookbuyer and bookstore-v1
## Access bookbuyer service from browser.

## Now apply manifest of bookthief application and deploy it

kubectl apply -f bookthief.yaml
## What got installed?
kubectl get pods,deployments,serviceaccounts -n bookthief

## Expose bookthief service and access it

## Now let's split the traffic:

## Remember that enablePermissiveTrafficPolicyMode parameter in service mesh configuration is current set as true, so traffic is not blocked. 


# Let's now turn if off and verify the application again.

kubectl edit meshconfig osm-mesh-config -n kube-system

## Now try accessing bookbuyer and bookthief again, you will see that is not working now. 

## Now we will create HTTPRouteGroup and TrafficTarget for bookbuy application to enable communication from bookbuyer to bookstore-v1.

curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/traffic-v1.yaml -o /tmp/bookapp/traffic-v1.yaml

## Open the file and apply it

kubectl apply -f traffic-v1.yaml

## Acess bookbuyer application again on port 7070. It will resume the connectivity as there is a traffictarget created for bookbuyer service.

## Now lets deploy second version of bookstore. This will deploy the traafic target also to enable traffic from bookbuyer to bookstore version 2.

kubectl apply -f bookstore-v2.yaml

## Now lets test traffic split between two versions of bookstore application. We will deploy another version of bookstore and then split the traffic between two.

curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/traffic-split-v2.yaml -o /tmp/bookapp/traffic-split-v2.yaml
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/traffic-split-50-50.yaml -o /tmp/bookapp/traffic-split-50-50.yaml 
curl https://raw.githubusercontent.com/nitinkansal1984/AKS/main/traffic-split-v1.yaml -o /tmp/bookapp/traffic-split-v1.yaml

## Direct all the traffic to version 2 bookstore.
kubectl apply -f traffic-split-v2.yaml

## Direct all the traffic to version 1 bookstore.
kubectl apply -f traffic-split-v1.yaml

## Finally split the traffic between two versions of bookstore.
kubectl apply -f traffic-split-v2.yaml

Thats it for this demo !
